#!/usr/bin/env node

require('dotenv').config();

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodeapp:server');
var http = require('http');
const cluster = require('node:cluster');
const os = require('node:os');

if (cluster.isPrimary) {

    console.log('Arrancando el primario')

  const numCores = os.cpus().length

  for (let i = 0; i < numCores; i++) {
    cluster.fork();
  }

  cluster.on('listening', (worker, address) => {
    console.log(`Worker ${worker.id} arrancado con PID ${worker.process.pid} `)
  });

  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.id} con PID ${worker.process.pid} se ha parado con codigo ${code} y signal ${signal}`)
    console.log('Arranco otro worker');
    cluster.fork();
  })

} else {

  var port = normalizePort(process.env.PORT || '3000');
  app.set('port', port);


  var server = http.createServer(app);


  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}

 

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}